// Code generated by MockGen. DO NOT EDIT.
// Source: .\placeamenity_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "go01-airbnb/internal/placeamenities/model"
	common "go01-airbnb/pkg/common"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceAmenitiesRepo is a mock of PlaceAmenitiesRepo interface.
type MockPlaceAmenitiesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceAmenitiesRepoMockRecorder
}

// MockPlaceAmenitiesRepoMockRecorder is the mock recorder for MockPlaceAmenitiesRepo.
type MockPlaceAmenitiesRepoMockRecorder struct {
	mock *MockPlaceAmenitiesRepo
}

// NewMockPlaceAmenitiesRepo creates a new mock instance.
func NewMockPlaceAmenitiesRepo(ctrl *gomock.Controller) *MockPlaceAmenitiesRepo {
	mock := &MockPlaceAmenitiesRepo{ctrl: ctrl}
	mock.recorder = &MockPlaceAmenitiesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceAmenitiesRepo) EXPECT() *MockPlaceAmenitiesRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlaceAmenitiesRepo) Create(arg0 context.Context, arg1 *model.PlaceAmenities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlaceAmenitiesRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceAmenitiesRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPlaceAmenitiesRepo) Delete(arg0 context.Context, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceAmenitiesRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceAmenitiesRepo)(nil).Delete), arg0, arg1)
}

// ListDataWithCondition mocks base method.
func (m *MockPlaceAmenitiesRepo) ListDataWithCondition(arg0 context.Context, arg1 map[string]any, arg2 *common.Paging, arg3 ...string) ([]model.PlaceAmenities, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataWithCondition", varargs...)
	ret0, _ := ret[0].([]model.PlaceAmenities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataWithCondition indicates an expected call of ListDataWithCondition.
func (mr *MockPlaceAmenitiesRepoMockRecorder) ListDataWithCondition(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataWithCondition", reflect.TypeOf((*MockPlaceAmenitiesRepo)(nil).ListDataWithCondition), varargs...)
}

// MockCheckPlaceOwner is a mock of CheckPlaceOwner interface.
type MockCheckPlaceOwner struct {
	ctrl     *gomock.Controller
	recorder *MockCheckPlaceOwnerMockRecorder
}

// MockCheckPlaceOwnerMockRecorder is the mock recorder for MockCheckPlaceOwner.
type MockCheckPlaceOwnerMockRecorder struct {
	mock *MockCheckPlaceOwner
}

// NewMockCheckPlaceOwner creates a new mock instance.
func NewMockCheckPlaceOwner(ctrl *gomock.Controller) *MockCheckPlaceOwner {
	mock := &MockCheckPlaceOwner{ctrl: ctrl}
	mock.recorder = &MockCheckPlaceOwnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckPlaceOwner) EXPECT() *MockCheckPlaceOwnerMockRecorder {
	return m.recorder
}

// CheckOwner mocks base method.
func (m *MockCheckPlaceOwner) CheckOwner(placeId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOwner", placeId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOwner indicates an expected call of CheckOwner.
func (mr *MockCheckPlaceOwnerMockRecorder) CheckOwner(placeId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOwner", reflect.TypeOf((*MockCheckPlaceOwner)(nil).CheckOwner), placeId, userId)
}
